@model Teeyoot.WizardSettings.ViewModels.ProductViewModel
@{
    Layout.Title = Model.Id == null ? T("Add New Product") : T("Edit Product");

    Style.Require("jQueryUI");
    Style.Include("multi-select/css/multi-select.css");
    Style.Include("datatables/css/jquery.dataTables.min.css");
    Style.Include("WizardSettings.css");

    Script.Require("jQuery");
    Script.Require("jQueryUI_Dialog");
    Script.Require("jQueryUI_Resizable");
    Script.Include("jquery.flip.js");
    Script.Include("jquery.multi-select.js");
    Script.Include("jquery.dataTables.min.js");
    Script.Include("edit-printable-area.js");
}

<div class="manage">
    <a class="button primaryAction" href="@Url.Action("Index", "Product")">@T("Back To List")</a>
</div>

<h2>
    @(Model.Id == null ? T("Add New Product") : T("Edit Product"))
</h2>

@using (Html.BeginFormAntiForgeryPost(Url.Action("EditProduct", "Product"), FormMethod.Post, new { id = "product_form", enctype = "multipart/form-data" }))
{
    @Html.HiddenFor(m => m.Id, new { id = "product_id" })
    <fieldset>
        @Html.LabelFor(m => m.Name, T("Name"))
        @Html.TextBoxFor(m => m.Name, new { @class = "text large", id = "name" })
        @Html.LabelFor(m => m.SelectedProductHeadline, T("Headline"))
        @Html.DropDownListFor(m => m.SelectedProductHeadline, new SelectList(Model.ProductHeadlines, "Id", "Name"), T("Select Headline ...").ToString(), new { id = "headlines" })
        @Html.LabelFor(m => m.Materials, T("Materials"))
        @Html.TextBoxFor(m => m.Materials, new { @class = "text large" })
        @Html.LabelFor(m => m.Details, T("Details"))
        @Html.TextBoxFor(m => m.Details, new { @class = "text large" })
        @Html.LabelFor(m => m.BaseCost, T("Cost of material"))
        @Html.TextBoxFor(m => m.BaseCost, new { @class = "text large", id = "baseCost" })
    </fieldset>
    <h3>@T("Product Groups")</h3>
    <hr />
    <fieldset>
        <select id="groups" name="SelectedProductGroups" multiple="multiple">
            @foreach (var productGroup in Model.ProductGroups)
            {
                <option value="@productGroup.Id" @if (productGroup.Selected) { <text> selected="selected" </text>  }>
                    @productGroup.Name
                </option>
            }
        </select>
        <hr />
        <button id="add_group" type="button" class="primaryAction">@T("Add New Group")</button>
    </fieldset>
    <h3>@T("Colours")</h3>
    <hr />
    <fieldset>
        <select id="colours" multiple="multiple">
            @foreach (var productColour in Model.ProductColours)
            {
                <option style="background-color: @productColour.HexValue;" value="@productColour.Id" @if (productColour.Selected) { <text> selected="selected" disabled="disabled" </text>  }
                        data-name="@productColour.Name" data-colour="@productColour.HexValue">
                    @productColour.Name
                </option>
            }
        </select>
        <hr />
        <button id="add_colour" type="button" class="primaryAction">@T("Add New Colour")</button>
    </fieldset>
    <h3>@T("Selected Colours")</h3>
    <hr />
    <fieldset>
        <table id="selected-colours-table" class="items">
            <thead>
                <tr>
                    <td>
                        @T("Color")
                    </td>
                    <td>
                        @T("Name")
                    </td>
                    @*<td>
                            @T("Base Cost")
                        </td>*@
                    <td>
                        @T("Action")
                    </td>
                </tr>
            </thead>
            <tbody>
                @for (var i = 0; i < Model.SelectedProductColours.Count; i++)
                {
                    <tr class="product-colour-row">
                        <td class="product-colour-colour" style="background-color: @Model.SelectedProductColours[i].HexValue;">
                            @Html.HiddenFor(m => Model.SelectedProductColours[i].Id, new { @class = "row-id" })
                            @Html.HiddenFor(m => Model.SelectedProductColours[i].ProductColourId, new { @class = "row-product-colour-id" })
                        </td>
                        <td class="product-colour-name">
                            @Model.SelectedProductColours[i].Name
                        </td>
                        @*<td class="product-colour-base-cost">
                                @Html.TextBoxFor(m => Model.SelectedProductColours[i].BaseCost, new {@class = "row-base-cost"})
                            </td>*@
                        <td>
                            <a href="javascript:;" class="remove-product-colour">@T("Remove")</a>
                        </td>
                    </tr>
                }
                <tr class="product-colour-template product-colour-row" style="display: none;">
                    <td class="product-colour-colour">
                        <input type="hidden" class="row-id" />
                        <input type="hidden" class="row-product-colour-id" />
                    </td>
                    <td class="product-colour-name"></td>
                    <td class="product-colour-base-cost">
                        <input type="text" value="0" class="row-base-cost" />
                    </td>
                    <td>
                        <a href="javascript:;" class="remove-product-colour">@T("Remove")</a>
                    </td>
                </tr>
            </tbody>
        </table>
    </fieldset>
    <h3>@T("Product Sizes")</h3>
    <hr />
    <fieldset>
        <table id="product-sizes-table" class="items">
            <thead>
                <tr>
                    <td>
                        @T("Size Code")
                    </td>
                    <td>
                        @T("Width (cm)")
                    </td>
                    <td>
                        @T("Length (cm)")
                    </td>
                    <td>
                        @T("Sleeve (cm)")
                    </td>
                    <td>
                        @T("Length (in)")
                    </td>
                    <td>
                        @T("Width (in)")
                    </td>
                    <td>
                        @T("Sleeve (in)")
                    </td>
                    <td>
                        @T("Select")
                    </td>
                    <td>
                        @T("Cost")
                    </td>
                </tr>
            </thead>
            <tbody>
                @foreach (var productSize in Model.ProductSizes)
                {
                    <tr>
                        <td>
                            @productSize.SizeCodeName
                        </td>
                        <td>
                            @productSize.WidthCm
                        </td>
                        <td>
                            @productSize.LengthCm
                        </td>
                        <td>
                            @productSize.SleeveCm
                        </td>
                        <td>
                            @productSize.LengthInch
                        </td>
                        <td>
                            @productSize.WidthInch
                        </td>
                        <td>
                            @productSize.SleeveInch
                        </td>
                        <td>
                            <input type="hidden" class="size-id" value="@productSize.Id" />
                            <input type="hidden" class="size-code-id" value="@productSize.SizeCodeId" />
                            <input class="select-product-size" type="checkbox" @if (productSize.Selected) { <text> checked="checked" </text>  } />
                        </td>
                        <td>
                            @if (productSize.Selected)
                            {
                                <input id="product-sizes-cost-@productSize.Id" type="text" value="@productSize.CostSize" class="row-base-cost product-sizes-cost" />
                            }
                            else
                            {
                                <input id="product-sizes-cost-@productSize.Id" type="text" value="0" class="row-base-cost product-sizes-cost" style="display: none" />
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <select id="selected-product-sizes" name="SelectedProductSizes" multiple="multiple" style="display: none;">
            @foreach (var productSize in Model.ProductSizes)
            {
                <option value="@productSize.Id" data-size-code-id="@productSize.SizeCodeId" @if (productSize.Selected) { <text> selected="selected" </text>  }></option>
            }
        </select>
        <select id="selected-product-sizes-cost" name="SelectedProductSizesCost" multiple="multiple" style="display: none;">
            @foreach (var productSize in Model.ProductSizes)
            {
                <option value="@productSize.CostSize" id="product-sizes-cost-@productSize.Id" data-size-code-id="@productSize.SizeCodeId" @if (productSize.Selected) { <text> selected="selected" </text>  }></option>
            }
        </select>
    </fieldset>
    <h3>@T("Product Images")</h3>
    <hr />
    <fieldset>
        <table class="items">
            <thead>
                <tr>
                    <td>
                        @T("Image type")
                    </td>
                    <td>
                        @T("Existing file")
                    </td>
                    <td>
                        @T("Choose Image. 530x630 with *.png format only allowed.")
                    </td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        @T("Front")
                    </td>
                    <td>
                        @if (Model.ProductImageFrontFileName != null)
                        {
                            @Model.ProductImageFrontFileName
                        }
                        else
                        {
                            <b>@T("Has not been uploaded")</b>
                        }
                    </td>
                    <td>
                        @Html.TextBoxFor(m => m.ProductImageFront, new { type = "file", accept = "image/png" })
                    </td>
                </tr>
                <tr>
                    <td>
                        @T("Back")
                    </td>
                    <td>
                        @if (Model.ProductImageBackFileName != null)
                        {
                            @Model.ProductImageBackFileName
                        }
                        else
                        {
                            <b>@T("Has not been uploaded")</b>
                        }
                    </td>
                    <td>
                        @Html.TextBoxFor(m => m.ProductImageBack, new { type = "file", accept = "image/png" })
                    </td>
                </tr>
            </tbody>
        </table>
        @if (Model.ProductImageFrontFileName != null && Model.ProductImageBackFileName != null)
        {
            <button id="edit_image" type="button" class="primaryAction">@T("Edit Image")</button>
        }
    </fieldset>
    <hr />
    <fieldset class="save-button">
        <button type="submit" class="primaryAction">@T("Save")</button>
        <a id="cancel" class="button" href="@Url.Action("Index", "Product")">@T("Cancel")</a>
    </fieldset>
    @Html.Partial("Product/SetPrintableArea", Model, ViewData)
}

@using (Script.Foot())
{
    <script>
        function selectProductColour(productColourId) {
            var selectedColourOption = $('#colours option[value="' + productColourId + '"]');
            selectedColourOption.prop('disabled', true);

            $('#colours').multiSelect('refresh');
        };

        function deselectProductColour(productColourId) {
            var deselectedColourOption = $('#colours option[value="' + productColourId + '"]');
            deselectedColourOption.prop('disabled', false);

            $('#colours').multiSelect('refresh');

            $('#colours').multiSelect('deselect', [productColourId]);
        };

        function fixProductColoursIndexing() {
            $('#selected-colours-table .product-colour-row:visible').each(function (index, element) {
                $(element).find('.row-id').attr('name', 'SelectedProductColours[' + index + '].Id');
                $(element).find('.row-product-colour-id').attr('name', 'SelectedProductColours[' + index + '].ProductColourId');
                //$(element).find('.row-base-cost').attr('name', 'SelectedProductColours[' + index + '].BaseCost');
            });
        };

        function addAndHandleProductColour(productColourId) {
            var selectedColourOption = $('#colours option[value="' + productColourId + '"]');
            var productColourTemplate = $('#selected-colours-table .product-colour-template').clone(true);
            var addedProductColour = $('#selected-colours-table tr:last').after(productColourTemplate);

            addedProductColour.removeClass('product-colour-template').show();

            $('.product-colour-colour', addedProductColour).css('background-color', selectedColourOption.data('colour'));
            $('.product-colour-colour .row-product-colour-id', addedProductColour).val(productColourId);
            $('.product-colour-name', addedProductColour).html(selectedColourOption.data('name'));
        };

        $(document).ready(function () {
            $('#colours').multiSelect({
                keepOrder: true,
                afterSelect: function (values) {
                    addAndHandleProductColour(values[0]);
                    selectProductColour(values[0]);
                }
            });

            $('.remove-product-colour').click(function () {
                var productColourId = $(this).closest('.product-colour-row').find('.row-product-colour-id').val();

                deselectProductColour(productColourId);

                $(this).closest('.product-colour-row').remove();
            });

            $('#add_colour').click(function () {
                var conf = '@T("All unsaved changes will be lost. Are you sure?")';
                if (confirm(conf)) {
                    window.location.href = '/Admin/Colours/Product/Add?returnUrl=' + encodeURIComponent(window.location.href);
                }
            });

            $('#groups').multiSelect({
                keepOrder: true
            });

            $('#add_group').click(function () {
                var conf = '@T("All unsaved changes will be lost. Are you sure?")';
                if (confirm(conf)) {
                    window.location.href = '/Admin/ProductGroups/Add?returnUrl=' + encodeURIComponent(window.location.href);
                }
            });

            var productSizesTable = $('#product-sizes-table').dataTable();

            productSizesTable.on('change', '.select-product-size', function () {
                var sizeId = $(this).closest('td').find('.size-id').val();
                var sizeCodeId = $(this).closest('td').find('.size-code-id').val();

                if ($(this).is(':checked')) {
                    var numberOfSelectedSizesWithTheSameSizeCode = $('#selected-product-sizes option:selected[data-size-code-id=' + sizeCodeId + ']').length;

                    if (numberOfSelectedSizesWithTheSameSizeCode > 0) {
                        $(this).prop('checked', false);
                        var text = '@T("You have already selected size with such code. There is only one allowed.")';
                        alert(text);
                        return;
                    }
                    $('#product-sizes-cost-' + sizeId).css('display', 'block');
                    $('#selected-product-sizes option[value=' + sizeId + ']').prop('selected', true);
                    $('#selected-product-sizes-cost option[id=product-sizes-cost-' + sizeId + ']').prop('selected', true);
                } else {
                    $('#selected-product-sizes option[value=' + sizeId + ']').prop('selected', false);
                    $('#product-size-cost-' + sizeId).css('display', 'none');
                    $('#selected-product-sizes-cost option[id=product-sizes-cost-' + sizeId + ']').prop('selected', false);
                }
            });

            productSizesTable.on('change', '.product-sizes-cost', function () {
                var costId = this.id;

                var cost = $('#selected-product-sizes-cost option[id=' + costId + ']')[0];
                cost.value = this.value;
            });

            $('#cancel').click(function () {
                var text = '@T("All unsaved changes will be lost. Are you sure?")';
                if (confirm(text)) {
                    return true;
                }
                return false;
            });

            $('#product_form').submit(function () {
                var name = $('#name').val();

                if ($.trim(name) === '') {
                    alert('@T("Please enter Product Name.")');
                    return false;
                }

                var selectedHeadline = $('#headlines option:selected').val();

                if (!selectedHeadline) {
                    alert('@T("Please select Product Headline.")');
                    return false;
                }

                var baseCost = $('#baseCost').val();

                if ($.trim(baseCost) === '0' || $.trim(baseCost) == parseFloat("0")) {
                    alert('@T("Please enter Base Cost.")');
                    return false;
                }

                fixProductColoursIndexing();
                return true;
            });

            $('#baseCost').keypress(function (event) {
                if ((event.which != 44 || $(this).val().indexOf(',') != -1) && (event.which < 48 || event.which > 57)) {
                    event.preventDefault();
                }
            });
        });
    </script>
}