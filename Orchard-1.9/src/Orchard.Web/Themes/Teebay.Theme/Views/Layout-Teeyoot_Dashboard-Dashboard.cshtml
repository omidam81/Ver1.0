@functions {
    // To support the layout classifaction below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
    string CalcuClassify(string[] zoneNames, string classNamePrefix) {
        var zoneCounter = 0;
        var zoneNumsFilled = string.Join("", zoneNames.Select(zoneName => { ++zoneCounter; return Model[zoneName] != null ? zoneCounter.ToString() : "";}).ToArray());
        return HasText(zoneNumsFilled) ? classNamePrefix + zoneNumsFilled : "";
    }
}
@{
    /* Global includes for the theme
    ***************************************************************/

    SetMeta(httpEquiv: "X-UA-Compatible", content: "IE=edge,chrome=1");
    SetMeta(name: "viewport", content: "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no");
    Style.Include("//fonts.googleapis.com/css?family=Lobster&subset=latin");
    Style.Include("site.css");
    Style.Include("teebay.css");
    Style.Include("teeyoot.dashboard.css");
    Style.Include("//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css");

    /* Some useful shortcuts or settings
    ***************************************************************/

    Func<dynamic, dynamic> Zone = x => Display(x); // Zone as an alias for Display to help make it obvious when we're displaying zones

    /* Layout classification based on filled zones
    ***************************************************************/

    //Add classes to the wrapper div to toggle aside widget zones on and off
    var asideClass = CalcuClassify(new [] {"AsideFirst", "AsideSecond"}, "aside-"); // for aside-1, aside-2 or aside-12 if any of the aside zones are filled
    if (HasText(asideClass)) {
        Model.Classes.Add(asideClass);
    }

    //Add classes to the wrapper div to toggle tripel widget zones on and off
    var tripelClass = CalcuClassify(new [] {"TripelFirst", "TripelSecond", "TripelThird"}, "tripel-"); // for tripel-1, triple-2, etc. if any of the tripel zones are filled
    if (HasText(tripelClass)) {
        Model.Classes.Add(tripelClass);
    }

    //Add classes to the wrapper div to toggle quad widget zones on and off
    var footerQuadClass = CalcuClassify(new [] {"FooterQuadFirst", "FooterQuadSecond", "FooterQuadThird", "FooterQuadFourth"}, "split-"); // for quad-1, quad-2, etc. if any of the quad zones are filled
    if (HasText(footerQuadClass)) {
        Model.Classes.Add(footerQuadClass);
    }

    /* Inserting some ad hoc shapes
    ***************************************************************/

    //WorkContext.Layout.Header.Add(New.Branding(), "5"); // Site name and link to the home page
    WorkContext.Layout.Footer.Add(New.BadgeOfHonor(), "5"); // Powered by Orchard
    WorkContext.Layout.Footer.Add(New.User(), "10"); // Login and dashboard links

    /* Last bit of code to prep the layout wrapper
    ***************************************************************/
    
    Model.Id = "layout-wrapper";
    var tag = Tag(Model, "div"); // using Tag so the layout div gets the classes, id and other attributes added to the Model
}
@tag.StartElement
<div class="dashboard-layout">
    @if (Model.Header != null)
    {
        <header class="tb-layout-header group">
            <div id="header">
                @Zone(Model.Header)
            </div>
        </header>
    }
    <div class="tb-layout-main-container">
        
            @if (Model.AsideFirst != null)
            {
                <aside class="tb-aside-first group">
                    @Zone(Model.AsideFirst)
                </aside>
            }
            <div class="group tb-layout-content">
                @if (Model.Messages != null)
                {
                    <div id="messages">
                        @Zone(Model.Messages)
                    </div>
                }
                @if (Model.Content != null)
                {
                    <div id="content" class="group">
                        @Zone(Model.Content)
                    </div>
                }
            </div>
       
    </div>


</div>

@tag.EndElement

<div class="tb-layout-footer group">
    <footer class="tb-footer" id="footer">
        <div id="footer-quad" class="group">
            @if (Model.FooterQuadFirst != null)
            {
                <div id="footer-quad-first">
                    @Zone(Model.FooterQuadFirst)
                </div>
            }
            @if (Model.FooterQuadSecond != null)
            {
                <div class="tb-footer-quad-second" id="footer-quad-second">
                    @Zone(Model.FooterQuadSecond)
                </div>
            }
            @if (Model.FooterQuadThird != null)
            {
                <div class="tb-footer-quad-third" id="footer-quad-third">
                    @Zone(Model.FooterQuadThird)
                </div>
            }
            @if (Model.FooterQuadFourth != null)
            {
                <div class="tb-footer-quad-forth" id="footer-quad-fourth">
                    @Zone(Model.FooterQuadFourth)
                </div>
            }
        </div>
        @if (Model.Footer != null)
        {
            <div id="footer-sig" class="group">
                @Zone(Model.Footer)
            </div>
        }
    </footer>
</div>



@{ 
    Script.Require("JQuery").AtFoot();
    Script.Include("teebay.js").AtFoot();
}
